!> \file platm/condinit.f90
!! \brief
!! \b DUMSES-Hybrid:
!! This is the initial conditions subroutine for the shallow hot Jupiter
!! test
!! \author
!! Marc Joos <marc.joos@cea.fr>, SÃ©bastien Fromang, Romain Teyssier, 
!! Patrick Hennebelle
!! \copyright
!! Copyrights 2013-2015, CEA.
!! This file is distributed under the CeCILL-A & GNU/GPL licenses, see
!! <http://www.cecill.info/licences/Licence_CeCILL_V2.1-en.html> and
!! <http://www.gnu.org/licenses/>
!! \date
!! \b created:          05-26-2015 
!! \b last \b modified: 05-26-2015
!<
!===============================================================================
!> setup the initial conditions for a shallow hot Jupiter atmosphere
!===============================================================================
subroutine condinit
  use variables
  use params
  use atmosphere
  use mpi_var
#if MPI==1
  use mpi
#endif
  implicit none

  real(dp) :: amp
  namelist /init_params/ amp,g,balanced,isentropic,cooling,drag,DT_EP,beta,t_rad,t_drag,B0,Tsurf,Psurf
  !
  integer  :: i,j,k,l,iseed
  real(dp) :: pressure,H,Rp,K0,gammam1,Temp,Tempm1,Tempmhalf,alpha
  real :: rvalue
#if MPI==1
  integer :: status(MPI_STATUS_SIZE)
  integer :: ierr
#endif

  ! Default input parameters
  amp=1.d0
  g=1.d1    ! in m.s-2
  Rp=xmin   ! ==1
  balanced=.false. ! balanced vs. unbalanced scheme
  isentropic=.false. !isotherme vs. adiabatic atm structure
  cooling=.false.
  wave=0.d0 ! Wave amplitude (in the velocity, only relevant for isentropic case)
  DT_EP=0.d0 !Amplitude of horizontal temperature difference due to radiative forcing
  beta=0.d0 !Gradient of the Coriolis term
  omegaEq=0.d0 !Absolute Coriolis parameter
  drag=.false. !using Rayleigh drag?
  t_drag=0.d0 ! Drag damping timescale

  ! earth parameters
  k_mumh=258.3 !for T=1K & mu=32 & mh=1.67e-27 kg & k in USI
  Rp=6371.e3    !in m
  g=1.d1    ! in m.s-2

  ! shallow hot jupiter
  deep=.false.
  k_mumh=3779.! For T=1K & mu=32 & mh=1.67e-27 kg & k in USI
  Psurf=1.d5  ! Bottom level pressure (default: Psurf=1 bar)
  Tsurf=1600. ! Bottom level temperature (in K)
  Dtrop=2.e-4 ! Temperature lapse rate (in K.m-1)
  dTstra=10.d0! Temperature increment in the stratosphere (in K)
  zstra=2.e6  ! Stratosphere height (in m)
  Rp=1.e8     ! Planet radius (in meters)
  g=8.d0      ! Planet gravity field (in m.s-2)
  t_rad=2.d0*pi/2.1e-5*0.5 ! Radiative cooling timescale (in seconds)
  B0=0.d0                  !Initial B-field (units to be determined)
  lyTherm=0.35d8 !Meridional size of thermal forcing

  open(unit=1,file='input' ,status='old')
  read(1,init_params)
  close(1)

  rho0=Psurf/Tsurf/k_mumh ! Bottom level density
  H=k_mumh*Tsurf/g        ! Bottom level scale height

  write (*,*) 'sound speed (in m.s-1)=',sqrt(gamma*Psurf/rho0)
  write (*,*) 'H (in km)=',H/1e3
  write (*,*) 'P0 (in bars)=',Psurf/1.e5

  uin=0.d0
  iseed=mype
  gammam1=gamma-1

  !Density
  if (ndim==1) then
     uin(i,:,:,1)=rho0*exp(-(x(i)-xmin)/H)
  endif
  if (ndim==3) then
#if MPI==1
     if (zposition==0) then
        do k=1,nz
           if (k==1) then
              call getTeq(Temp     ,1.d0,1.d0,z(k)        ,Tsurf,Dtrop,zstra,dTstra,0.d0,1,1,k)
              call getTeq(Tempmhalf,1.d0,1.d0,z(k)-dz/2.d0,Tsurf,Dtrop,zstra,dTstra,0.d0,1,1,k)
              alpha=-0.5d0*Tsurf/Temp*dz/H-(Temp-Tempmhalf)/Temp
              uin(:,:,k,1)=rho0*exp(alpha)
           else
              call getTeq(Temp     ,1.d0,1.d0,z(k)        ,Tsurf,Dtrop,zstra,dTstra,0.d0,1,1,k)
              call getTeq(Tempmhalf,1.d0,1.d0,z(k)-dz/2.d0,Tsurf,Dtrop,zstra,dTstra,0.d0,1,1,k)
              call getTeq(Tempm1   ,1.d0,1.d0,z(k)-dz,Tsurf,Dtrop,zstra,dTstra,0.d0,1,1,k)
              alpha=-Tsurf/Tempmhalf*dz/H-(Temp-Tempm1)/Tempmhalf
              uin(:,:,k,1)=uin(:,:,k-1,1)*exp(alpha)
           endif
        end do
        call MPI_Send( uin(:,:,nz,1) , (iu2-iu1)*(ju2-ju1), MPI_DOUBLE_PRECISION, &
             &         zright, 10, &
             &         MPI_COMM_WORLD, status, ierr)
     else
        call MPI_Recv( uin(:,:,0,1) , (iu2-iu1)*(ju2-ju1), MPI_DOUBLE_PRECISION, &
             &         zleft, 10, &
             &         MPI_COMM_WORLD, status, ierr)
        do k=1,nz
           call getTeq(Temp     ,1.d0,1.d0,z(k)        ,Tsurf,Dtrop,zstra,dTstra,0.d0,1,1,k)
           call getTeq(Tempmhalf,1.d0,1.d0,z(k)-dz/2.d0,Tsurf,Dtrop,zstra,dTstra,0.d0,1,1,k)
           call getTeq(Tempm1   ,1.d0,1.d0,z(k)-dz,Tsurf,Dtrop,zstra,dTstra,0.d0,1,1,k)
           alpha=-Tsurf/Tempmhalf*dz/H-(Temp-Tempm1)/Tempmhalf
           uin(:,:,k,1)=uin(:,:,k-1,1)*exp(alpha)
        end do
        if (zposition<nzslice-1) then
           call MPI_Send( uin(:,:,nz,1) , (iu2-iu1)*(ju2-ju1), MPI_DOUBLE_PRECISION, &
                &         zright, 10, &
                &         MPI_COMM_WORLD, status, ierr)
        endif
     endif
#else
     do k=1,nz
        if (k==1) then
           call getTeq(Temp     ,1.d0,1.d0,z(k)        ,Tsurf,Dtrop,zstra,dTstra,0.d0,1,1,k)
           call getTeq(Tempmhalf,1.d0,1.d0,z(k)-dz/2.d0,Tsurf,Dtrop,zstra,dTstra,0.d0,1,1,k)
           alpha=-0.5d0*Tsurf/Temp*dz/H-(Temp-Tempmhalf)/Temp
           uin(:,:,k,1)=rho0*exp(alpha)
        else
           call getTeq(Temp     ,1.d0,1.d0,z(k)        ,Tsurf,Dtrop,zstra,dTstra,0.d0,1,1,k)
           call getTeq(Tempmhalf,1.d0,1.d0,z(k)-dz/2.d0,Tsurf,Dtrop,zstra,dTstra,0.d0,1,1,k)
           call getTeq(Tempm1   ,1.d0,1.d0,z(k)-dz,Tsurf,Dtrop,zstra,dTstra,0.d0,1,1,k)
           alpha=-Tsurf/Tempmhalf*dz/H-(Temp-Tempm1)/Tempmhalf
           uin(:,:,k,1)=uin(:,:,k-1,1)*exp(alpha)
        endif
     end do
#endif
  endif

  !Momentum & B-field
  do k=ku1,ku2
     do j=ju1,ju2
        do i=iu1,iu2
           !Momentum (Random condition)
           call ran2(iseed,rvalue)
           uin(i,j,k,2) = uin(i,j,k,1)*amp*(rvalue-0.5)*sqrt(ciso**2)
           call ran2(iseed,rvalue)
           uin(i,j,k,4) = uin(i,j,k,1)*amp*(rvalue-0.5)*sqrt(ciso**2)
           call ran2(iseed,rvalue)
           uin(i,j,k,3) = uin(i,j,k,1)*amp*(rvalue-0.5)*sqrt(ciso**2)
           !Magnetic field
           uin(i,j,k,6:nvar+3)=0.d0
           uin(i,j,k,7)=B0 ; uin(i,j,k,10)=B0
        end do
     end do
  end do

  !Total energy
  do k=ku1,ku2
     do j=ju1,ju2
        do i=iu1,iu2

           call getTeq(Temp,1.d0,1.d0,z(k),Tsurf,Dtrop,zstra,dTstra,0.d0,i,j,k)
           pressure=k_mumh*uin(i,j,k,1)*Temp
           uin(i,j,k,5) = pressure/(gamma-1.) + B0**2/2.d0


        end do
     end do
  end do

  return
end subroutine condinit
!====================================================================
!====================================================================
!====================================================================
subroutine getTeq(Teq,x,y,z,Tsurf,Dtrop,zstra,dTstra,DT_EP,i,j,k)
  use params
  use atmosphere , only : k_mumh,g,lytherm
  implicit none
  integer, intent(in)::i,j,k
  real(dp), intent(in )::x,y,z,Tsurf,Dtrop,zstra,dTstra,DT_EP
  real(dp), intent(out)::Teq
  !local variables
  real(dp) :: betaStra,dTirr,H
  !Teq w/o forcing
  Teq=Tsurf
  Teq=Teq-Dtrop*(zstra+5.d-1*(z-zstra))
  Teq=Teq+sqrt(dTstra**2+(5.d-1*Dtrop*(z-zstra))**2)
  !forcing
  H=k_mumh*Tsurf/g 
  dTirr=DT_EP*cos(2.d0*pi*x/(xmax-xmin))*exp(-y**2/2./lytherm**2)
  !dTirr=DT_EP*cos(2.d0*pi*x/(xmax-xmin))*exp(-y**2/2./(0.1*(ymax-ymin))**2)
  !dTirr=DT_EP*cos(2.d0*pi*x/(xmax-xmin))*exp(-y**2/2./(0.05*(ymax-ymin))**2)
  if (DT_EP>0.d0) then
     call getBeta(i,j,k,betaStra)
  else 
     betaStra=0.d0
  endif
  !Total Teq
  Teq=Teq+betaStra*dTirr
end subroutine getTeq
!===============================================================================
!> Compute radiative timescale for Newtonian forcing
!===============================================================================
subroutine getTauRad(oneOverTrad,pressure)
  use precision
  implicit none
  real(dp), intent(in )::pressure
  real(dp), intent(out)::oneOverTrad
  return
end subroutine getTauRad
!===============================================================================
!> Compute jet velocity from position
!===============================================================================
subroutine getU(x,y,Ujet)
  use precision
  implicit none
  real(dp) :: x,y,Ujet
  return
end subroutine getU
!====================================================================
!====================================================================
!====================================================================
subroutine getBeta(i,j,k,betaStra)
  use params
  use variables , only : uin,z
  use atmosphere , only : Psurf,zstra
  implicit none
  integer,intent(in)::i,j,k
  real(dp),intent(out)::betaStra
  real(dp)::rho,rhovx,rhovy,rhovz,E,Bxc,Byc,Bzc,P,Pstra
  rho=uin(i,j,k,1)
  rhovx=uin(i,j,k,2) ; rhovy=uin(i,j,k,3) ; rhovz=uin(i,j,k,4)
  E=uin(i,j,k,5)
  Bxc=5.d-1*(uin(i,j,k,6)+uin(i+1,j  ,k  ,6))
  Byc=5.d-1*(uin(i,j,k,7)+uin(i  ,j+1,k  ,7))
  Bzc=5.d-1*(uin(i,j,k,8)+uin(i  ,j  ,k+1,8))
  call get_P(rho,rhovx,rhovy,rhovz,E,Bxc,Byc,Bzc,gamma,P)
  Pstra=0.12e5
  if (z(k)<zstra) then
!     betaStra=sin(pi/2.d0*(exp(-z/H)-exp(-zstra/H))/(1.d0-exp(-zstra/H)))
     betaStra=sin(pi/2.d0*(P/Psurf-Pstra/Psurf)/(1.d0-Pstra/Psurf))
  else 
     betaStra=0.d0
  endif
  return
end subroutine getBeta
!====================================================================
!  numerical recipes random number generator ran2
!    requires input seed value=iseed
!    returns real random number=rvalue
!    Also updates iseed for next call 
!
subroutine ran2(iseed,rvalue)
     
      integer iseed
      real rvalue
      integer idum,IM1,IM2,IMM1,IA1,IA2,IQ1,IQ2,IR1,IR2,NTAB,NDIV
      real AM,EPS,RNMX
      parameter (IM1=2147483563,IM2=2147483399,AM=1./IM1,IMM1=IM1-1,&
               & IA1=40014,IA2=40692,IQ1=53668,IQ2=52774,IR1=12211,&
               & IR2=3791,NTAB=32,NDIV=1+IMM1/NTAB,EPS=1.2e-7,RNMX=1.-EPS)
      integer idum2,jj,kk,iv(NTAB),iy
      data idum2/123456789/, iv/NTAB*0/, iy/0/
!
      idum=iseed
      if (idum.le.0) then
        idum=max(-idum,1)
        idum2=idum
        do 11 jj=NTAB+8,1,-1
          kk=idum/IQ1
          idum=IA1*(idum-kk*IQ1)-kk*IR1
          if (idum.lt.0) idum=idum+IM1
          if (jj.le.NTAB) iv(jj)=idum
11      continue
        iy=iv(1)
      endif
      kk=idum/IQ1
      idum=IA1*(idum-kk*IQ1)-kk*IR1
      if (idum.lt.0) idum=idum+IM1
      kk=idum2/IQ2
      idum2=IA2*(idum2-kk*IQ2)-kk*IR2
      if (idum2.lt.0) idum2=idum2+IM2
      jj=1+iy/NDIV
      iy=iv(jj)-idum2
      iv(jj)=idum
      if(iy.lt.1)iy=iy+IMM1
      rvalue=min(AM*iy,RNMX)
      iseed=idum
      return
end subroutine ran2
!====================================================================
!====================================================================
!====================================================================
subroutine legendre(LMAX,X,P,dP)
!
! Subroutine to generate Legendre polynomials P_L(X)
! for L = 0,1,...,LMAX with given X.
!
  implicit none
  integer, intent (IN) :: LMAX
  integer :: L
  real, intent (IN) :: X
  real, intent (OUT), dimension (0:LMAX) :: P,dP
!
  P(0) = 1.0 ; dP(0) = 0.0
  P(1) = X   ; dP(1) = 1.0
  do L = 1, LMAX-1
     P(L+1) = ((2.0*L+1)*X* P(L)         -L* P(L-1))/(L+1)
    dP(L+1) = ((2.0*L+1)  *(P(L)+X*dP(L))-L*dP(L-1))/(L+1)
  end do
end subroutine legendre
!====================================================================
!====================================================================
!====================================================================
subroutine GetInterpolated(zloc,floc,z,func,n)
  use precision
  implicit none
  integer :: n
  real(dp) :: zloc,floc
  real(dp), dimension(n) :: z,func

  integer :: k
  real(dp) :: z0,f0,df,dz

  k=1
  do while (z(k)<zloc)
     k=k+1
  end do
  f0=func(k) ; z0=z(k)
  df=func(k+1)-func(k)
  dz=z(k+1)-z(k)
  floc=f0+(zloc-z0)*df/dz

  return
end subroutine GetInterpolated
